rd_("AoThe MAC failed to be validated.BlThe output type for the SAS MAC calculation.CjA struct representing a short auth string verification \xe2\x80\xa6AoGet the megolm message\xe2\x80\x99s mac.BlGenerate a new, random, Curve25519SecretKey.CbCreate a new, random, <code>Ed25519Keypair</code>.CbCreate a new random <code>Ed25519SecretKey</code>.CbCreate a new, random, unestablished ECIES session.CnConstruct a new group session, with a random ratchet state \xe2\x80\xa6EaCreates a new <code>InboundGroupSession</code> from a <code>SessionKey</code> \xe2\x80\xa6D`Create a new <code>Account</code> with new random identity keys.BgCreate a new random verification objectBlAn implementation of the Olm double ratchet.CmUser-friendly key verification using short authentication \xe2\x80\xa6CnThe encoded session key didn\xe2\x80\x99t contain enough data to be \xe2\x80\xa6AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.0000000000000000000000000000000000000000000000000000000000BkSign the given message with our secret key.DfSign the given slice of bytes with this <code>Ed25519SecretKey</code>.CiSign the given message using our Ed25519 fingerprint key.AoAn unestablished ECIES session.AjThe sessions are the same.BgThe Error type for the ECIES submodule.DdA unique identifier for a one-time <code>Curve25519PublicKey</code>.ClThe first session has a worse initial message index than \xe2\x80\xa6DkGenerate <code>SasBytes</code> using HKDF with the shared secret as the \xe2\x80\xa6CbImplementation of an integrated encryption scheme.AnThe established ECIES channel.0CkMerge the session with the given other session, picking \xe2\x80\xa6BdThe signature wasn\xe2\x80\x99t valid base64.BaThe pickle wasn\xe2\x80\x99t valid base64.00BbThe message wasn\xe2\x80\x99t valid base64.BcThe ciphertext is not valid base64.BnThe encoded session key wasn\xe2\x80\x99t valid base64.CmThe first session has a better initial message index than \xe2\x80\xa6BoThe payload of the pickle could not be decoded.BlThe object could not be encoded as a pickle.C`The number of bytes a Curve25519 public key has.BmThe number of bytes a Ed25519 secret key has.BmThe number of bytes a Ed25519 public key has.BlThe number of bytes a Ed25519 signature has.CfA normal message, contains only the ciphertext and \xe2\x80\xa6AhThe normal message type.DkA pre-key message, contains metadata to establish a <code>Session</code>\xe2\x80\xa6AiThe pre-key message type.BlView this shared secret key as a byte array.CnAttempt do decode a string into a <code>InitialMessage</code>.CnAttempt do decode a base64 string into a <code>Message</code>.AoEncode the message as a string.0CjCreates a new <code>InboundGroupSession</code> from an \xe2\x80\xa6AmThe actual length of the key.BhAn implementation of the Megolm ratchet.ClConvert the group session into a struct which implements \xe2\x80\xa6CiConvert the inbound group session into a struct which \xe2\x80\xa6CfConvert the account into a struct which implements \xe2\x80\xa6CfConvert the session into a struct which implements \xe2\x80\xa6BlConvert the public key to a vector of bytes.CnVerify that the provided signature for a given message has \xe2\x80\xa6DhAn Olm <code>Account</code> manages all cryptographic keys used on a \xe2\x80\xa6DfAn encrypted message a <code>EstablishedEcies</code> channel has sent.AiAn encrypted Olm message.CeAn Olm session represents one end of an encrypted \xe2\x80\xa6BlThe version of vodozemac that is being used.BeThe pickle has a unsupported version.0CbThe encoded session key had a unsupported version.DeCompare the <code>InboundGroupSession</code> with the given other \xe2\x80\xa6ChThe public part of the one-time keys that were newly \xe2\x80\xa6DfDecrypt the given message using this <code>EstablishedEcies</code> \xe2\x80\xa6CoDecrypts the provided <code>MegolmMessage</code> using this \xe2\x80\xa6CkTry to decrypt an Olm message, which will either return \xe2\x80\xa6BbThe Ed25519 key, used for signing.DhEncrypt the given plaintext using this <code>EstablishedEcies</code> \xe2\x80\xa6D`Encrypt the given <code>plaintext</code> with the group session.CeSerialize and encrypt the pickle using the given key.0DlEncrypt the <code>plaintext</code> and construct an <code>OlmMessage</code>.11BeThe plaintext of the initial message.AdThe initial message.C`The actual message that contains the ciphertext.BoGet the message\xe2\x80\x99s ciphertext as a byte array.CgThe public part of the one-time keys that had to be \xe2\x80\xa6DaThe <code>Session</code> that was created from a pre-key message.CkGet the numeric version of this <code>SessionConfig</code>.AoThe version of the Olm message.1ChThe initial message could not have been decoded, the \xe2\x80\xa6CkError type for failures that may occur when decoding or \xe2\x80\xa6CmBytes generated from an shared secret that can be used as \xe2\x80\xa6CmError type describing failures that can happen during the \xe2\x80\xa6BlView this shared secret key as a byte array.BeView this public key as a byte array.0C`Convert the check code to an array of two bytes.AnGet the byte slice of the MAC.CjGet the raw bytes of the short auth string that can be \xe2\x80\xa6CkThe base key, a single use key that was created just in \xe2\x80\xa6DiThe ephemeral <code>Curve25519PublicKey</code> created by the session \xe2\x80\xa6CjGet the three decimal numbers that can be presented to \xe2\x80\xa6AnThe type of key being decoded.BkConvert this shared secret to a byte array.CmConvert the <code>Curve25519SecretKey</code> to a byte array.BhConvert this public key to a byte array.BnGet the byte representation of the secret key.CjConvert the <code>Ed25519Signature</code> to a byte array.CoSerialize the <code>ExportedSessionKey</code> to a byte vector.CgSerialize the <code>SessionKey</code> to a byte vector.CkEncode the <code>MegolmMessage</code> as an array of bytes.CeEncode the <code>Message</code> as an array of bytes.CkEncode the <code>PreKeyMessage</code> as an array of bytes.BnConvert the check code to two base-10 numbers.DkConvert the <code>OlmMessage</code> into a message type, and ciphertext \xe2\x80\xa6CeA check code that can be used to confirm that two \xe2\x80\xa6BjThe pickle contains an invalid public key.CgThe encoded session key contains an invalid public key.BdThe signature failed to be verified.CoUnable to decompress the curve point <code>r</code> from an \xe2\x80\xa6BlAn embedded signature couldn\xe2\x80\x99t be decoded.BiThe signature on the message was invalid.BmThe signature on the session key was invalid.CjGenerate the given number of bytes using HKDF with the \xe2\x80\xa6ClCheck if two <code>InboundGroupSession</code>s are the same.DhExport the <code>InboundGroupSession</code> at the specified message \xe2\x80\xa6BgThe decrypted plaintext of the message.BeThe plaintext of the pre-key message.CdGet a reference to the megolm message\xe2\x80\x99s signature.CkSerialize a Curve25519 public key to an unpadded base64 \xe2\x80\xa6CbConvert the secret key to a base64 encoded string.CjSerialize a Ed25519PublicKey public key to an unpadded \xe2\x80\xa6DdSerialize an <code>Ed25519Signature</code> to an unpadded base64 \xe2\x80\xa6BiEncodes the <code>KeyId</code> in Base64.DeSerialize the <code>ExportedSessionKey</code> to a base64 encoded \xe2\x80\xa6DaSerialize the <code>SessionKey</code> to a base64 encoded string.CbEncode the <code>MegolmMessage</code> as a string.BlEncode the <code>Message</code> as a string.CbEncode the <code>PreKeyMessage</code> as a string.BkConvert the MAC to a base64 encoded string.DfCreate a <code>SessionConfig</code> for the Megolm version 1. This \xe2\x80\xa6DkCreate a <code>SessionConfig</code> for the Olm version 1. This version \xe2\x80\xa6DfCreate a <code>SessionConfig</code> for the Megolm version 2. This \xe2\x80\xa6DkCreate a <code>SessionConfig</code> for the Olm version 2. This version \xe2\x80\xa6BgA Rust implementation of Olm and MegolmCnCreate a new, random, unestablished ECIES session with the \xe2\x80\xa6CcThe encrypted pickle could not have been decrypted.BiThe pickle could not have been decrypted.0CeMessage decryption failed. Either the message was \xe2\x80\xa6DkThe pre-key message that was used to establish the <code>Session</code> \xe2\x80\xa6BmAn embedded public key couldn\xe2\x80\x99t be decoded.CkThe message authentication code of the message was invalid.0BjEnum over the different Olm message types.BlThe session key, can be used to create a \xe2\x80\xa6CmPermanently advances the session to the specified message \xe2\x80\xa6DaGet the <code>CheckCode</code> which uniquely identifies this \xe2\x80\xa6BfThe ciphertext of the initial message.AnThe ciphertext of the message.BeThe actual ciphertext of the message.0CiThe Curve25519 key, used for to establish shared secrets.ClCreate a <code>Curve25519PublicKey</code> from a byte array.DbDeserialize the <code>ExportedSessionKey</code> from a byte slice.CjDeserialize the <code>SessionKey</code> from a byte slice.DcTry to decode the given byte slice as a <code>MegolmMessage</code>.DaTry to decode the given byte slice as a Olm <code>Message</code>.0DgCreate an <code>OlmMessage</code> from a message type and a ciphertext.DhCreate a <code>Curve25519SecretKey</code> from the given slice of bytes.DgTry to create a <code>Curve25519PublicKey</code> from a slice of bytes.DdTry to create a <code>Ed25519SecretKey</code> from a slice of bytes.DdTry to create a <code>Ed25519PublicKey</code> from a slice of bytes.DdTry to create a <code>Ed25519Signature</code> from a slice of bytes.CgCreate a new <code>Mac</code> object from a byte slice.BkGet the public Ed25519 key of this keypair.DcGet the public key that matches this <code>Ed25519SecretKey</code>.BiGet our <code>Curve25519PublicKey</code>.0CkThe ephemeral public key that was used to establish the \xe2\x80\xa6CmGet the public key that can be used to establish a shared \xe2\x80\xa6CmReturns the globally unique session ID, in base64-encoded \xe2\x80\xa6BhRetrieves the unique ID of this session.11CfReturns the globally unique session ID which these \xe2\x80\xa6CfVerify a MAC that was previously created using the \xe2\x80\xa6ClFailed to correctly decode a public key that was encoded \xe2\x80\xa6CmError type describing the different ways message decoding \xe2\x80\xa6CjAn invalid byte was found in the input. The offset and \xe2\x80\xa6BdThe Olm message has an invalid type.BmAn enum over the two supported message types.ClError type describing the various ways Vodozemac pickles \xe2\x80\xa6CgThe set of keys that were used to establish the Olm \xe2\x80\xa6ChThe sessions are not the same, they can\xe2\x80\x99t be compared.CmThe index of the chain that was used when the message was \xe2\x80\xa6C`Get a copy of the account\xe2\x80\x99s public Ed25519 keyCkInstantiate a Curve25519 public key from an unpadded base64DgTry to create a <code>Ed25519SecretKey</code> from a base64 encoded \xe2\x80\xa6CnInstantiate a Ed25519PublicKey public key from an unpadded \xe2\x80\xa6DiTry to create a <code>Ed25519Signature</code> from an unpadded base64 \xe2\x80\xa6DgDeserialize the <code>ExportedSessionKey</code> from base64 encoded \xe2\x80\xa6DcDeserialize the <code>SessionKey</code> from base64 encoded string.CoTry to decode the given string as a <code>MegolmMessage</code>.CmTry to decode the given string as a Olm <code>Message</code>.DcTry to decode the given string as a Olm <code>PreKeyMessage</code>.DbCreate a new <code>Mac</code> object from a base64 encoded string.CoRestore a <code>GroupSession</code> from a previously saved \xe2\x80\xa6DgRestore an <code>InboundGroupSession</code> from a previously saved \xe2\x80\xa6EcRestore an <code>Account</code> from a previously saved <code>AccountPickle</code>.EbRestore a <code>Session</code> from a previously saved <code>SessionPickle</code>.CnThe public part of the ratchet key, that was used when the \xe2\x80\xa6BlExport the group session into a session key.CfA Megolm group session represents a single sending \xe2\x80\xa6DgStruct holding the two public identity keys of an <code>Account</code>.ClError type for the case when we try to generate too many \xe2\x80\xa6nInvalid nonce.C`There was an error with the libolm pickle formatBlThe result of a Diffie-Hellman key exchange.BkGet the currently unpublished fallback key.ClThe long term identity key of the sender of the message. \xe2\x80\xa6DhThe long-term <code>Curve25519PublicKey</code> of the session initiator.AlGet the type of the message.ChThe single-use key that was uploaded to a public key \xe2\x80\xa6DdThe one-time <code>Curve25519PublicKey</code> that the initiator \xe2\x80\xa6BjGet the keys associated with this session.CkThe collection of all keys required for establishing an \xe2\x80\xa6ChA format suitable for serialization which implements \xe2\x80\xa6ChThe length of the input, as measured in valid base64 \xe2\x80\xa6AlAn encrypted Megolm message.BaAn encrypted Olm pre-key message.CiThe message couldn\xe2\x80\x99t be decoded as a valid protocol \xe2\x80\xa6CkThe serialized Vodozemac object couldn\xe2\x80\x99t be deserialized.CiA struct to configure how Megolm sessions should work \xe2\x80\xa6ClA struct to configure how Olm sessions should work under \xe2\x80\xa67BkDecode the input as base64 with no padding.BkEncode the input as base64 with no padding.CmCalculate a MAC for the given input using the info string \xe2\x80\xa6ClGet the index of 7 emojis that can be presented to users \xe2\x80\xa6CaGet the <code>IdentityKeys</code> of this AccountBoHas the MAC been truncated in this Olm message.BaReturn the current message index.CkThe index of the message that was used when the message \xe2\x80\xa6CjThe message index, used to detect replay attacks. Each \xe2\x80\xa6BlGet the currently unpublished one-time keys.ClA struct collecting both a public, and a secret, Ed25519 \xe2\x80\xa6CjA struct representing a short auth string verification \xe2\x80\xa6CkThe initial message, sent by the ECIES channel establisher.ClThe current account was created by libolm and can\xe2\x80\x99t be \xe2\x80\xa6CnThe nature of the padding was not as configured: absent or \xe2\x80\xa6CgThe ciphertext of the message isn\xe2\x80\x99t padded correctly.0ClThe pickle does not contain a valid receiving or sending \xe2\x80\xa6BfThe message has a unsupported version.BfThe pickle is missing a valid version.0BgThe message is missing a valid version.CfError type describing signature verification failures.CcGet a copy of the account\xe2\x80\x99s public Curve25519 keyCkPerform a Diffie-Hellman key exchange between the given \xe2\x80\xa6CnEstablishes a SAS secret by performing a DH handshake with \xe2\x80\xa6CgObtain a pickle from a ciphertext by decrypting and \xe2\x80\xa6000ClGet the public key that was created by us, that was used \xe2\x80\xa6EhGet the <code>SessionConfig</code> that this <code>GroupSession</code> is configured \xe2\x80\xa6EfGet the <code>SessionConfig</code> that this <code>Session</code> is configured to \xe2\x80\xa6C`Error type for Megolm-based decryption failures.BmError type for Olm-based decryption failures.CjThe message doesn\xe2\x80\x99t have enough data to be correctly \xe2\x80\xa6DkThe result of a comparison between two <code>InboundGroupSession</code> \xe2\x80\xa6AoThe expected length of the key.CmFailed to correctly decode a private key that was encoded \xe2\x80\xa6DhA message successfully decrypted by an <code>InboundGroupSession</code>.CiAn Ed25519 public key, used to verify digital signatures.CiAn Ed25519 secret key, used to create digital signatures.CkAn Ed25519 digital signature, can be used to verify the \xe2\x80\xa6AmAn established ECIES session.ChThe Base64 encoded key does not contain the expected \xe2\x80\xa6ChThe length of the message authentication code of the \xe2\x80\xa60CjThe embedded message authentication code couldn\xe2\x80\x99t be \xe2\x80\xa6CkThe initial message could not have been decoded, it\xe2\x80\x99s \xe2\x80\xa6BmThe public part of a <code>RatchetKey</code>.CmToo many messages have been skipped to attempt decrypting \xe2\x80\xa6CkGet the public key that was created by the other party, \xe2\x80\xa6CkPickle an <code>Account</code> into a libolm pickle format.CkEnsure in constant-time that this shared secret did not \xe2\x80\xa6BeErrors that can occur while decoding.CmThe last non-padding input symbol\xe2\x80\x99s encoded 6 bits have \xe2\x80\xa6CmError type describing the various ways libolm pickles can \xe2\x80\xa6CmThe session is missing the correct message key to decrypt \xe2\x80\xa6CjThe pre-key message contained an unknown one-time key. \xe2\x80\xa6CdRetrieves the first known message index for this \xe2\x80\xa6AiThe exported session key.ChA format suitable for serialization which implements \xe2\x80\xa6CgThe error type for the ECIES message decoding failures.ChOne or more keys lacked contributory behavior in the \xe2\x80\xa6CfAt least one of the keys did not have contributory \xe2\x80\xa6DiCreates a <code>GroupSession</code> object by unpickling a session in \xe2\x80\xa6DeCreates a <code>InboundGroupSession</code> object by unpickling a \xe2\x80\xa6DiCreate an <code>Account</code> object by unpickling an account pickle \xe2\x80\xa6DjCreate a <code>Session</code> object by unpickling a session pickle in \xe2\x80\xa6BlStruct representing a Curve25519 public key.BlStruct representing a Curve25519 secret key.CfA Megolm inbound group session represents a single \xe2\x80\xa6BbA Protobuf message decoding error.?DdThe <code>Account</code> stores at most two private parts of the \xe2\x80\xa6DkError describing failure modes when creating a Olm <code>Session</code> \xe2\x80\xa6CjHave we ever received and decrypted a message from the \xe2\x80\xa6BlCreate a dehydrated device from the account.CmError type describing the various ways dehydrated devices \xe2\x80\xa6CeThe result of an inbound ECIES channel establishment.DeReturn type for the creation of inbound <code>Session</code> objects.CjThe pre-key message contains a Curve25519 identity key \xe2\x80\xa6DkError type describing failure modes for the <code>SessionKey</code> and \xe2\x80\xa6BcGenerate a single new fallback key.CfThe result of an outbound ECIES channel establishment.EgCreate a <code>Session</code> from the given <code>PreKeyMessage</code> message and \xe2\x80\xa6CoCreate an <code>Account</code> object from a dehydrated device.CkGenerates the supplied number of one time keys. Returns \xe2\x80\xa6CmMark all currently unpublished one-time and fallback keys \xe2\x80\xa6DjCreate a <code>Session</code> with the given identity key and one-time \xe2\x80\xa6CnEstablishes a SAS secret by performing a DH handshake with \xe2\x80\xa6ChA format suitable for serialization which implements \xe2\x80\xa6EhCreate a <code>EstablishedEcies</code> from an <code>InitialMessage</code> encrypted \xe2\x80\xa6CgGet the number of one-time keys we have stored locally.CjThe result type for the one-time key generation operation.DjCreate an <code>EstablishedEcies</code> session using the other side\xe2\x80\x99\xe2\x80\xa6DkExports the <code>InboundGroupSession</code> at its first known message \xe2\x80\xa6CmGet the maximum number of one-time keys the client should \xe2\x80\xa6CmCalculate a MAC for the given input using the info string \xe2\x80\xa6")